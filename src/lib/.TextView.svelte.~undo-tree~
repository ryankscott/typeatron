(undo-tree-save-format-version . 1)
"4b7cfab2d281d510eeb8c7b66ce98af66073166d"
[nil nil nil nil (25453 64971 123178 0) 0 nil]
([nil nil ((nil face (rainbow-delimiters-depth-1-face) 401 . 407) (nil local-map (keymap (3 keymap (39 . typescript-convert-to-template)) keymap (27 keymap (17 . prog-indent-sexp))) 401 . 407) (nil svelte-submode #s(svelte--submode "TypeScript" "</script>" #^[nil #^[(0) nil syntax-table 
#^^[3 0 (1) (1) (1) (1) (1) (1) (1) (1) (1) (0) (0) (1) (0) (0) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (0) (1) (7) (1) (2) (2) (3) (1) (4 . 41) (5 . 40) (3) (3) (1) (3) (1) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (1) (3) (3) (3) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 93) (9) (5 . 91) (1) (3) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 125) (3) (5 . 123) (1) (1)] #^^[1 0 #^^[2 0 
#^^[3 0 (1) (1) (1) (1) (1) (1) (1) (1) (1) (0) (0) (1) (0) (0) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (0) (1) (7) (1) (2) (2) (3) (1) (4 . 41) (5 . 40) (3) (3) (1) (3) (1) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (1) (3) (3) (3) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 93) (9) (5 . 91) (1) (3) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 125) (3) (5 . 123) (1) (1)] 
#^^[3 128 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (0) (1) (3) (3) (3) (2) (3) (1) (3) (3) (3) (1) (3) (3) (3) (3) (3) (3) (2) (2) (3) (2) (3) (3) (3) (2) (3) (1) (3) (3) (3) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) 
#^^[3 640 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (3) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) 
#^^[3 896 (2) (2) (2) (2) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) 
#^^[3 1408 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2) (1) (2) (2) (1) (2) (2) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) 
#^^[3 3584 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 3712 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 3840 (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2) (1) (2) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1)] 
#^^[3 3968 (2) (2) (2) (2) (2) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)]] #^^[2 4096 (2) (2) (2) (2) (2) (2) 
#^^[3 4864 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] #^^[2 8192 
#^^[3 8192 (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (0) (1) (1) (1) (1) (1) (1) (1) (1) (1) (3) (3) (1) (1) (1) (1) (1) (1) (1) (1) (1) (3) (4 . 8262) (5 . 8261) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (3) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (0) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 8318) (5 . 8317) (2)] 
#^^[3 8320 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 8334) (5 . 8333) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 8448 (2) (2) (2) (3) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 8576 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)] (3) (3) 
#^^[3 8960 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4 . 9002) (5 . 9001) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)] 
#^^[3 9088 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4 . 9141) (5 . 9140) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)] 
#^^[3 9216 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)] 
#^^[3 9344 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 9472 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 9600 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (2) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (2) (2) (3) (3) (2) (2) (2) (2) (3) (3) (2) (2) (3) (3) (2) (2) (2) (2) (3) (3) (3) (2) (2) (3) (2) (2) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 9728 (2) (2) (2) (2) (2) (3) (3) (2) (2) (2) (2) (2) (2) (2) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (2) (3) (3) (3) (2) (3) (3) (3) (3) (2) (3) (3) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) 
#^^[3 9984 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 10089) (5 . 10088) (4 . 10091) (5 . 10090) (4 . 10093) (5 . 10092) (2) (2) (4 . 10097) (5 . 10096) (4 . 10099) (5 . 10098) (4 . 10101) (5 . 10100) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 10112 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 10215) (5 . 10214) (4 . 10217) (5 . 10216) (4 . 10219) (5 . 10218) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) 
#^^[3 10624 (2) (2) (2) (4 . 10628) (5 . 10627) (4 . 10630) (5 . 10629) (4 . 10632) (5 . 10631) (4 . 10634) (5 . 10633) (4 . 10636) (5 . 10635) (4 . 10638) (5 . 10637) (4 . 10640) (5 . 10639) (4 . 10642) (5 . 10641) (4 . 10644) (5 . 10643) (4 . 10646) (5 . 10645) (4 . 10648) (5 . 10647) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 10749) (5 . 10748) (2) (2)] (3) (3) (3) (3) (2) (2) (2) (2) (1) (2) (2) (2)] #^^[2 12288 
#^^[3 12288 (0) (1) (1) (1) (2) (2) (2) (2) (4 . 12297) (5 . 12296) (4 . 12299) (5 . 12298) (4 . 12301) (5 . 12300) (4 . 12303) (5 . 12302) (4 . 12305) (5 . 12304) (3) (3) (4 . 12309) (5 . 12308) (4 . 12311) (5 . 12310) (4 . 12313) (5 . 12312) (4 . 12315) (5 . 12314) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 12416 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (2) (2) (2) (2)] (2) (2) 
#^^[3 12800 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (3) (3)] (2) (2) 
#^^[3 13184 (3) (3) (3) (3) (3) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (3) (3) (2) (2) (3) (2) (2) (3) (2) (3) (2) (2) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) #^^[2 40960 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) 
#^^[3 43648 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) #^^[2 61440 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) 
#^^[3 64768 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 64831) (5 . 64830) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) 
#^^[3 65024 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 65078) (5 . 65077) (4 . 65080) (5 . 65079) (4 . 65082) (5 . 65081) (4 . 65084) (5 . 65083) (4 . 65086) (5 . 65085) (4 . 65088) (5 . 65087) (4 . 65090) (5 . 65089) (4 . 65092) (5 . 65091) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 65114) (5 . 65113) (4 . 65116) (5 . 65115) (4 . 65118) (5 . 65117) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) 
#^^[3 65280 (2) (1) (1) (1) (3) (1) (1) (1) (4 . 65289) (5 . 65288) (1) (3) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (1) (1) (3) (3) (3) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 65341) (3) (5 . 65339) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (4 . 65373) (3) (5 . 65371) (3) (4 . 65376) (5 . 65375) (1) (4 . 65379) (5 . 65378) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] 
#^^[3 65408 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (2) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)]]] #^^[1 65536 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) #^^[2 126976 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) 
#^^[3 129920 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1)] (2) (2) (2) (2) (2) (2) (2) (2)]] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) #^^[1 1114112 #^^[2 1114112 (3) 
#^^[3 1114240 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) 
#^^[3 1114752 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)] 
#^^[3 1114880 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) #^^[1 1310720 #^^[2 1310720 (3) 
#^^[3 1310848 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) 
#^^[3 1311360 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) #^^[2 1343488 (3) (3) 
#^^[3 1343744 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) #^^[1 2555904 (2) (2) (2) (2) (2) (2) (2) (2) (2) #^^[2 2592768 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) 
#^^[3 2596736 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)]] #^^[2 2596864 
#^^[3 2596864 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) 
#^^[3 2597120 (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)] (3) 
#^^[3 2597376 (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3)] 
#^^[3 2597504 (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2)] (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2)] syntax-table 
#^^[3 0 nil nil nil nil nil nil nil nil nil nil (2097164) nil nil (2097164) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (3) (1) (1) (7) nil nil (393217) (1) nil (1) nil (2818049) nil nil nil nil nil nil nil nil nil nil nil nil (1) (1) (1) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (9) nil nil (3) (7) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (1) nil nil nil] #^^[1 0 #^^[2 0 
#^^[3 0 nil nil nil nil nil nil nil nil nil nil (2097164) nil nil (2097164) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (3) (1) (1) (7) nil nil (393217) (1) nil (1) nil (2818049) nil nil nil nil nil nil nil nil nil nil nil nil (1) (1) (1) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (9) nil nil (3) (7) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (1) nil nil nil] 
#^^[3 128 nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil (1) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil] typescript-syntax-propertize js-indent-line (keymap (3 keymap (39 . typescript-convert-to-template)) keymap (27 keymap (17 . prog-indent-sexp))) ((font-lock-mode-major-mode . typescript-mode) (eldoc-mode-major-mode . typescript-mode) (smart-tab-mode-major-mode . typescript-mode) (subword-mode-major-mode . typescript-mode) (tree-sitter-mode-major-mode . typescript-mode) (undo-tree-mode-major-mode . typescript-mode) (diff-hl-mode-major-mode . typescript-mode) (flycheck-mode-major-mode . typescript-mode) (smartparens-mode-major-mode . typescript-mode) (evil-local-mode-major-mode . typescript-mode) (evil-collection-unimpaired-mode-major-mode . typescript-mode) (evil-surround-mode-major-mode . typescript-mode) (yas-minor-mode-major-mode . typescript-mode) (company-mode-major-mode . typescript-mode) (auto-revert-mode-major-mode . typescript-mode) (change-major-mode-hook turn-off-hideshow t) (font-lock-major-mode . typescript-mode) (c-current-comment-prefix . "//+\\|\\**") (electric-indent-chars 123 125 40 41 58 59 44 10) (c-comment-start-regexp . "/[*/]\\|\\s!") (c-line-comment-starter . "//") (c-block-comment-ender-regexp . "\\*/") (c-block-comment-prefix . "* ") (c-comment-prefix-regexp . "//+\\|\\**") (comment-end . "") (comment-start . "// ") (major-mode . typescript-mode)) ((font-lock-mode-major-mode . typescript-mode) (font-lock-mode-set-explicitly . t) (font-lock-fontified) (font-lock-mode) (tree-sitter-hl--font-lock-keywords t (("\\(this\\)\\." (1 'typescript-this-face)) ("\\_<\\(extends\\|implements\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|readonly\\|static\\)\\_>" (1 'typescript-access-modifier-face)) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (1 'typescript-primitive-face)) ("[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\s-*<\\s-*[a-zA-Z_$]" ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(\\s-*>[^<]*\\)?" (backward-char) (end-of-line) (1 font-lock-type-face))) ("\\(?::\\|=>\\)\\s-\\(?:\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*\\(is\\)\\s-*\\)?\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)\\(<\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)>\\)?\\([]\\)?\\([,;]\\)?\\s-*{?" (1 'font-lock-variable-name-face nil t) (2 'font-lock-keyword-face nil t) (3 'font-lock-type-face)) ("<\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)>" (1 'font-lock-type-face)) "\\_<import\\_>" ("^\\s-*\\(?:declare\\|\\(?:export\\(?:\\s-+default\\)?\\)\\)?\\s-*function\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" 1 font-lock-function-name-face) ("^\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*:\\s-*function\\_>" 1 font-lock-function-name-face) ("\\_<\\(Infinity\\|NaN\\|arguments\\|false\\|null\\|t\\(?:his\\|rue\\)\\|undefined\\)\\_>" . font-lock-constant-face) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" . font-lock-type-face) ("\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>" 1 font-lock-keyword-face) ("\\_<for\\_>" "\\s-+\\(each\\)\\_>" nil nil (1 font-lock-keyword-face)) ("\\_<yield\\(\\*\\|\\_>\\)" . font-lock-keyword-face) ("{" ("\\(\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>\\):" (save-excursion (ignore-errors (up-list)) (point)) nil (1 'default t t))) (typescript--jsdoc-param-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t) (3 'typescript-jsdoc-value t t)) (typescript--jsdoc-typed-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t)) (typescript--jsdoc-arg-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-value t t)) (typescript--jsdoc-empty-tag-matcher (1 'typescript-jsdoc-tag t t)) (typescript--typedoc-link-matcher (0 'typescript-jsdoc-value t)) (typescript--typedoc-literal-markup-matcher (0 'typescript-jsdoc-value t)) (typescript--tslint-flag-matcher (1 font-lock-preprocessor-face t)) ("\\.\\(prototype\\)\\_>" (1 font-lock-constant-face)) ("\\_<class[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<extends[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<implements[[:space:]]+" ("\\_<\\sw+" nil nil (0 font-lock-type-face))) ("\\_<interface[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<type[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<enum[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) (typescript--class-decl-matcher "\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (goto-char (match-beginning 1)) nil (1 font-lock-type-face)) (typescript--class-decl-matcher "\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (if (match-beginning 2) (progn (setq typescript--tmp-location (match-end 2)) (goto-char typescript--tmp-location) (insert "=") (goto-char (match-beginning 2))) (setq typescript--tmp-location nil) (goto-char (point-at-eol))) (when typescript--tmp-location (save-excursion (goto-char typescript--tmp-location) (delete-char 1))) (1 font-lock-type-face)) (typescript--class-decl-matcher (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\(?:\"\\s-*,\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\)?" t] 4] (1 font-lock-type-face t) (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\"\\s-*,\\s-*\\[" t] 4] "[[,]\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (backward-char) (end-of-line) (1 font-lock-type-face)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\s-*[],]" t] 4] "\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (if (save-excursion (backward-char) (typescript--inside-dojo-class-list-p)) (forward-symbol -1) (end-of-line)) (end-of-line) (1 font-lock-type-face)) ("\\_<\\(const\\|var\\|let\\)\\_>\\|\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (typescript--variable-decl-matcher nil nil nil)) ("\\_<new\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<instanceof\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<function\\_>\\(\\s-+[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)?\\s-*\\(<.*>\\)?\\s-*(\\s-*\\(?:$\\|[a-zA-Z_$]\\)" (typescript--function-argument-matcher (prog1 (save-excursion (ignore-errors (up-list)) (point)) (backward-char)) nil nil)) ("\\(=>\\)[[:space:]]*\\(?:$\\)?[[:space:]]*{" (1 font-lock-keyword-face) (typescript--function-argument-matcher (prog1 (progn (backward-char) (typescript--backward-to-parameter-list) (point)) (backward-sexp)) (re-search-forward "{" nil t) nil)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (typescript--function-argument-matcher (let ((point-orig (point)) (is-method-def (ignore-errors (up-list) (and (or (looking-at-p (rx (* (or whitespace 10)) "{")) (and (looking-at-p (rx (* (or whitespace 10)) ":")) (save-excursion (backward-sexp 2) (skip-syntax-backward " >") (not (eq (char-before) 63))))) (save-excursion (backward-sexp) (backward-word) (not (memq 'font-lock-keyword-face (face-at-point nil t)))))))) (if is-method-def (prog1 (point) (goto-char point-orig)) (point))) nil nil)) ("\\(@[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" (1 font-lock-function-name-face)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face)) ("\\(?:\\.\\s-*\\)\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face t)) ("\\_<\\(console\\)\\_>" (1 font-lock-type-face)) ("\\(=>\\)" (1 font-lock-keyword-face)) rainbow-delimiters--propertize) ("\\(this\\)\\." (1 'typescript-this-face)) ("\\_<\\(extends\\|implements\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|readonly\\|static\\)\\_>" (1 'typescript-access-modifier-face)) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (1 'typescript-primitive-face)) ("[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\s-*<\\s-*[a-zA-Z_$]" ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(\\s-*>[^<]*\\)?" (backward-char) (end-of-line) (1 font-lock-type-face))) ("\\(?::\\|=>\\)\\s-\\(?:\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*\\(is\\)\\s-*\\)?\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)\\(<\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)>\\)?\\([]\\)?\\([,;]\\)?\\s-*{?" (1 'font-lock-variable-name-face nil t) (2 'font-lock-keyword-face nil t) (3 'font-lock-type-face)) ("<\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)>" (1 'font-lock-type-face)) ("\\_<import\\_>" (0 font-lock-keyword-face)) ("^\\s-*\\(?:declare\\|\\(?:export\\(?:\\s-+default\\)?\\)\\)?\\s-*function\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" (1 font-lock-function-name-face)) ("^\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*:\\s-*function\\_>" (1 font-lock-function-name-face)) ("\\_<\\(Infinity\\|NaN\\|arguments\\|false\\|null\\|t\\(?:his\\|rue\\)\\|undefined\\)\\_>" (0 font-lock-constant-face)) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (0 font-lock-type-face)) ("\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>" (1 font-lock-keyword-face)) ("\\_<for\\_>" ("\\s-+\\(each\\)\\_>" nil nil (1 font-lock-keyword-face))) ("\\_<yield\\(\\*\\|\\_>\\)" (0 font-lock-keyword-face)) ("{" ("\\(\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>\\):" (save-excursion (ignore-errors (up-list)) (point)) nil (1 'default t t))) (typescript--jsdoc-param-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t) (3 'typescript-jsdoc-value t t)) (typescript--jsdoc-typed-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t)) (typescript--jsdoc-arg-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-value t t)) (typescript--jsdoc-empty-tag-matcher (1 'typescript-jsdoc-tag t t)) (typescript--typedoc-link-matcher (0 'typescript-jsdoc-value t)) (typescript--typedoc-literal-markup-matcher (0 'typescript-jsdoc-value t)) (typescript--tslint-flag-matcher (1 font-lock-preprocessor-face t)) ("\\.\\(prototype\\)\\_>" (1 font-lock-constant-face)) ("\\_<class[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<extends[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<implements[[:space:]]+" ("\\_<\\sw+" nil nil (0 font-lock-type-face))) ("\\_<interface[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<type[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<enum[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) (typescript--class-decl-matcher ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (goto-char (match-beginning 1)) nil (1 font-lock-type-face))) (typescript--class-decl-matcher ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (if (match-beginning 2) (progn (setq typescript--tmp-location (match-end 2)) (goto-char typescript--tmp-location) (insert "=") (goto-char (match-beginning 2))) (setq typescript--tmp-location nil) (goto-char (point-at-eol))) (when typescript--tmp-location (save-excursion (goto-char typescript--tmp-location) (delete-char 1))) (1 font-lock-type-face))) (typescript--class-decl-matcher (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\(?:\"\\s-*,\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\)?" t] 4] (1 font-lock-type-face t) (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\"\\s-*,\\s-*\\[" t] 4] ("[[,]\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (backward-char) (end-of-line) (1 font-lock-type-face))) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\s-*[],]" t] 4] ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (if (save-excursion (backward-char) (typescript--inside-dojo-class-list-p)) (forward-symbol -1) (end-of-line)) (end-of-line) (1 font-lock-type-face))) ("\\_<\\(const\\|var\\|let\\)\\_>\\|\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (typescript--variable-decl-matcher nil nil nil)) ("\\_<new\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<instanceof\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<function\\_>\\(\\s-+[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)?\\s-*\\(<.*>\\)?\\s-*(\\s-*\\(?:$\\|[a-zA-Z_$]\\)" (typescript--function-argument-matcher (prog1 (save-excursion (ignore-errors (up-list)) (point)) (backward-char)) nil nil)) ("\\(=>\\)[[:space:]]*\\(?:$\\)?[[:space:]]*{" (1 font-lock-keyword-face) (typescript--function-argument-matcher (prog1 (progn (backward-char) (typescript--backward-to-parameter-list) (point)) (backward-sexp)) (re-search-forward "{" nil t) nil)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (typescript--function-argument-matcher (let ((point-orig (point)) (is-method-def (ignore-errors (up-list) (and (or (looking-at-p (rx (* (or whitespace 10)) "{")) (and (looking-at-p (rx (* (or whitespace 10)) ":")) (save-excursion (backward-sexp 2) (skip-syntax-backward " >") (not (eq (char-before) 63))))) (save-excursion (backward-sexp) (backward-word) (not (memq 'font-lock-keyword-face (face-at-point nil t)))))))) (if is-method-def (prog1 (point) (goto-char point-orig)) (point))) nil nil)) ("\\(@[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" (1 font-lock-function-name-face)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face)) ("\\(?:\\.\\s-*\\)\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face t)) ("\\_<\\(console\\)\\_>" (1 font-lock-type-face)) ("\\(=>\\)" (1 font-lock-keyword-face)) (rainbow-delimiters--propertize (0 font-lock-keyword-face))) (font-lock-fontify-region-function . #[128 "\300\301\302#\207" [apply tree-sitter-hl--highlight-region-with-fallback #[128 "\301\302\300!\"\207" [font-lock-fontify-region-function apply default-value] 4 "

(fn &rest ARGS)"] nil] 5 nil]) (font-lock-keywords t (("\\(this\\)\\." (1 'typescript-this-face)) ("\\_<\\(extends\\|implements\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|readonly\\|static\\)\\_>" (1 'typescript-access-modifier-face)) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (1 'typescript-primitive-face)) ("[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\s-*<\\s-*[a-zA-Z_$]" ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(\\s-*>[^<]*\\)?" (backward-char) (end-of-line) (1 font-lock-type-face))) ("\\(?::\\|=>\\)\\s-\\(?:\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*\\(is\\)\\s-*\\)?\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)\\(<\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)>\\)?\\([]\\)?\\([,;]\\)?\\s-*{?" (1 'font-lock-variable-name-face nil t) (2 'font-lock-keyword-face nil t) (3 'font-lock-type-face)) ("<\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)>" (1 'font-lock-type-face)) "\\_<import\\_>" ("^\\s-*\\(?:declare\\|\\(?:export\\(?:\\s-+default\\)?\\)\\)?\\s-*function\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" 1 font-lock-function-name-face) ("^\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*:\\s-*function\\_>" 1 font-lock-function-name-face) ("\\_<\\(Infinity\\|NaN\\|arguments\\|false\\|null\\|t\\(?:his\\|rue\\)\\|undefined\\)\\_>" . font-lock-constant-face) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" . font-lock-type-face) ("\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>" 1 font-lock-keyword-face) ("\\_<for\\_>" "\\s-+\\(each\\)\\_>" nil nil (1 font-lock-keyword-face)) ("\\_<yield\\(\\*\\|\\_>\\)" . font-lock-keyword-face) ("{" ("\\(\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>\\):" (save-excursion (ignore-errors (up-list)) (point)) nil (1 'default t t))) (typescript--jsdoc-param-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t) (3 'typescript-jsdoc-value t t)) (typescript--jsdoc-typed-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t)) (typescript--jsdoc-arg-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-value t t)) (typescript--jsdoc-empty-tag-matcher (1 'typescript-jsdoc-tag t t)) (typescript--typedoc-link-matcher (0 'typescript-jsdoc-value t)) (typescript--typedoc-literal-markup-matcher (0 'typescript-jsdoc-value t)) (typescript--tslint-flag-matcher (1 font-lock-preprocessor-face t)) ("\\.\\(prototype\\)\\_>" (1 font-lock-constant-face)) ("\\_<class[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<extends[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<implements[[:space:]]+" ("\\_<\\sw+" nil nil (0 font-lock-type-face))) ("\\_<interface[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<type[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<enum[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) (typescript--class-decl-matcher "\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (goto-char (match-beginning 1)) nil (1 font-lock-type-face)) (typescript--class-decl-matcher "\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (if (match-beginning 2) (progn (setq typescript--tmp-location (match-end 2)) (goto-char typescript--tmp-location) (insert "=") (goto-char (match-beginning 2))) (setq typescript--tmp-location nil) (goto-char (point-at-eol))) (when typescript--tmp-location (save-excursion (goto-char typescript--tmp-location) (delete-char 1))) (1 font-lock-type-face)) (typescript--class-decl-matcher (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\(?:\"\\s-*,\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\)?" t] 4] (1 font-lock-type-face t) (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\"\\s-*,\\s-*\\[" t] 4] "[[,]\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (backward-char) (end-of-line) (1 font-lock-type-face)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\s-*[],]" t] 4] "\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (if (save-excursion (backward-char) (typescript--inside-dojo-class-list-p)) (forward-symbol -1) (end-of-line)) (end-of-line) (1 font-lock-type-face)) ("\\_<\\(const\\|var\\|let\\)\\_>\\|\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (typescript--variable-decl-matcher nil nil nil)) ("\\_<new\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<instanceof\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<function\\_>\\(\\s-+[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)?\\s-*\\(<.*>\\)?\\s-*(\\s-*\\(?:$\\|[a-zA-Z_$]\\)" (typescript--function-argument-matcher (prog1 (save-excursion (ignore-errors (up-list)) (point)) (backward-char)) nil nil)) ("\\(=>\\)[[:space:]]*\\(?:$\\)?[[:space:]]*{" (1 font-lock-keyword-face) (typescript--function-argument-matcher (prog1 (progn (backward-char) (typescript--backward-to-parameter-list) (point)) (backward-sexp)) (re-search-forward "{" nil t) nil)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (typescript--function-argument-matcher (let ((point-orig (point)) (is-method-def (ignore-errors (up-list) (and (or (looking-at-p (rx (* (or whitespace 10)) "{")) (and (looking-at-p (rx (* (or whitespace 10)) ":")) (save-excursion (backward-sexp 2) (skip-syntax-backward " >") (not (eq (char-before) 63))))) (save-excursion (backward-sexp) (backward-word) (not (memq 'font-lock-keyword-face (face-at-point nil t)))))))) (if is-method-def (prog1 (point) (goto-char point-orig)) (point))) nil nil)) ("\\(@[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" (1 font-lock-function-name-face)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face)) ("\\(?:\\.\\s-*\\)\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face t)) ("\\_<\\(console\\)\\_>" (1 font-lock-type-face)) ("\\(=>\\)" (1 font-lock-keyword-face)) rainbow-delimiters--propertize) ("\\(this\\)\\." (1 'typescript-this-face)) ("\\_<\\(extends\\|implements\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|readonly\\|static\\)\\_>" (1 'typescript-access-modifier-face)) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (1 'typescript-primitive-face)) ("[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\s-*<\\s-*[a-zA-Z_$]" ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(\\s-*>[^<]*\\)?" (backward-char) (end-of-line) (1 font-lock-type-face))) ("\\(?::\\|=>\\)\\s-\\(?:\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*\\(is\\)\\s-*\\)?\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)\\(<\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)>\\)?\\([]\\)?\\([,;]\\)?\\s-*{?" (1 'font-lock-variable-name-face nil t) (2 'font-lock-keyword-face nil t) (3 'font-lock-type-face)) ("<\\(\\(?:[A-Z][A-Za-z0-9]+\\.\\)\\{0,\\}\\(?:[A-Z][A-Za-z0-9]+\\)\\)>" (1 'font-lock-type-face)) ("\\_<import\\_>" (0 font-lock-keyword-face)) ("^\\s-*\\(?:declare\\|\\(?:export\\(?:\\s-+default\\)?\\)\\)?\\s-*function\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" (1 font-lock-function-name-face)) ("^\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\s-*:\\s-*function\\_>" (1 font-lock-function-name-face)) ("\\_<\\(Infinity\\|NaN\\|arguments\\|false\\|null\\|t\\(?:his\\|rue\\)\\|undefined\\)\\_>" (0 font-lock-constant-face)) ("\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (0 font-lock-type-face)) ("\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>" (1 font-lock-keyword-face)) ("\\_<for\\_>" ("\\s-+\\(each\\)\\_>" nil nil (1 font-lock-keyword-face))) ("\\_<yield\\(\\*\\|\\_>\\)" (0 font-lock-keyword-face)) ("{" ("\\(\\_<\\(a\\(?:bstract\\|ny\\|s\\(?:ync\\)?\\|wait\\)\\|b\\(?:igint\\|oolean\\|reak\\)\\|c\\(?:a\\(?:se\\|tch\\)\\|lass\\|on\\(?:st\\(?:ructor\\)?\\|tinue\\)\\)\\|d\\(?:e\\(?:bugger\\|clare\\|fault\\|lete\\)\\|o\\)\\|e\\(?:lse\\|num\\|x\\(?:port\\|te\\(?:nds\\|rn\\)\\)\\)\\|f\\(?:alse\\|inally\\|or\\|rom\\|unction\\)\\|g\\(?:et\\|oto\\)\\|i\\(?:mp\\(?:lements\\|ort\\)\\|n\\(?:fer\\|stanceof\\|terface\\)\\|[fn]\\)\\|keyof\\|let\\|module\\|n\\(?:amespace\\|e\\(?:ver\\|w\\)\\|u\\(?:ll\\|mber\\)\\)\\|o\\(?:bject\\|f\\|verride\\)\\|p\\(?:r\\(?:ivate\\|otected\\)\\|ublic\\)\\|re\\(?:adonly\\|turn\\)\\|s\\(?:et\\|t\\(?:atic\\|ring\\)\\|uper\\|witch\\)\\|t\\(?:h\\(?:is\\|row\\)\\|r\\(?:ue\\|y\\)\\|ype\\(?:of\\)?\\)\\|unknown\\|v\\(?:ar\\|oid\\)\\|while\\)\\_>\\):" (save-excursion (ignore-errors (up-list)) (point)) nil (1 'default t t))) (typescript--jsdoc-param-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t) (3 'typescript-jsdoc-value t t)) (typescript--jsdoc-typed-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-type t t)) (typescript--jsdoc-arg-tag-matcher (1 'typescript-jsdoc-tag t t) (2 'typescript-jsdoc-value t t)) (typescript--jsdoc-empty-tag-matcher (1 'typescript-jsdoc-tag t t)) (typescript--typedoc-link-matcher (0 'typescript-jsdoc-value t)) (typescript--typedoc-literal-markup-matcher (0 'typescript-jsdoc-value t)) (typescript--tslint-flag-matcher (1 font-lock-preprocessor-face t)) ("\\.\\(prototype\\)\\_>" (1 font-lock-constant-face)) ("\\_<class[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<extends[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<implements[[:space:]]+" ("\\_<\\sw+" nil nil (0 font-lock-type-face))) ("\\_<interface[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<type[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) ("\\_<enum[[:space:]]+\\(\\(?:\\sw\\|\\s_\\)+\\)" (1 font-lock-type-face)) (typescript--class-decl-matcher ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (goto-char (match-beginning 1)) nil (1 font-lock-type-face))) (typescript--class-decl-matcher ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)\\(?:\\.\\|.*$\\)" (if (match-beginning 2) (progn (setq typescript--tmp-location (match-end 2)) (goto-char typescript--tmp-location) (insert "=") (goto-char (match-beginning 2))) (setq typescript--tmp-location nil) (goto-char (point-at-eol))) (when typescript--tmp-location (save-excursion (goto-char typescript--tmp-location) (delete-char 1))) (1 font-lock-type-face))) (typescript--class-decl-matcher (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\(?:\"\\s-*,\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\)?" t] 4] (1 font-lock-type-face t) (2 font-lock-type-face nil t)) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*dojo\\.declare\\s-*(\"\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\"\\s-*,\\s-*\\[" t] 4] ("[[,]\\s-*\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (backward-char) (end-of-line) (1 font-lock-type-face))) (#[(limit) "\302>\205 \303\304	\305#\207" [typescript-enabled-frameworks limit dojo re-search-forward "^\\s-*[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\s-*[],]" t] 4] ("\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)\\s-*\\(?:\\].*$\\)?" (if (save-excursion (backward-char) (typescript--inside-dojo-class-list-p)) (forward-symbol -1) (end-of-line)) (end-of-line) (1 font-lock-type-face))) ("\\_<\\(const\\|var\\|let\\)\\_>\\|\\_<\\(any\\|b\\(?:igint\\|ool\\(?:ean\\)?\\)\\|n\\(?:\\(?:ev\\|umb\\)er\\)\\|string\\|unknown\\|void\\)\\_>" (typescript--variable-decl-matcher nil nil nil)) ("\\_<new\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<instanceof\\_>\\s-+\\([a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\(?:\\.[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)*\\)" (1 font-lock-type-face)) ("\\_<function\\_>\\(\\s-+[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)?\\s-*\\(<.*>\\)?\\s-*(\\s-*\\(?:$\\|[a-zA-Z_$]\\)" (typescript--function-argument-matcher (prog1 (save-excursion (ignore-errors (up-list)) (point)) (backward-char)) nil nil)) ("\\(=>\\)[[:space:]]*\\(?:$\\)?[[:space:]]*{" (1 font-lock-keyword-face) (typescript--function-argument-matcher (prog1 (progn (backward-char) (typescript--backward-to-parameter-list) (point)) (backward-sexp)) (re-search-forward "{" nil t) nil)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (typescript--function-argument-matcher (let ((point-orig (point)) (is-method-def (ignore-errors (up-list) (and (or (looking-at-p (rx (* (or whitespace 10)) "{")) (and (looking-at-p (rx (* (or whitespace 10)) ":")) (save-excursion (backward-sexp 2) (skip-syntax-backward " >") (not (eq (char-before) 63))))) (save-excursion (backward-sexp) (backward-word) (not (memq 'font-lock-keyword-face (face-at-point nil t)))))))) (if is-method-def (prog1 (point) (goto-char point-orig)) (point))) nil nil)) ("\\(@[a-zA-Z_$]\\(?:\\s_\\|\\sw\\)*\\)" (1 font-lock-function-name-face)) ("\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face)) ("\\(?:\\.\\s-*\\)\\(\\(?:\\w\\|\\s_\\)+\\)\\(<.+>\\)? *(" (1 font-lock-function-name-face t)) ("\\_<\\(console\\)\\_>" (1 font-lock-type-face)) ("\\(=>\\)" (1 font-lock-keyword-face)) (rainbow-delimiters--propertize (0 font-lock-keyword-face))) (font-lock-syntax-table) (font-lock-keywords-case-fold-search) (font-lock-keywords-only) (font-lock-set-defaults . t) (font-lock-major-mode . typescript-mode) (typescript--quick-match-re-func . "function\\|^[ 	]*\\(?:#define[ 	]+[a-zA-Z_]\\|Ext\\.extend\\|Object\\.extend\\|\\(?:var[ 	]+\\)?[a-zA-Z_$0-9.]+[ 	]*=[ 	]*\\(?:Class\\.create\\|Ext\\.extend\\|[a-zA-Z_$0-9]+\\.extend\\(?:Final\\)?\\)[ 	]*(\\|dojo\\.declare[ 	]*(\\|MochiKit\\.Base\\.update[ 	]*(\\|[a-zA-Z_$0-9.]+\\.prototype\\(?:\\.[a-zA-Z_$0-9]+[ 	]*=[ 	]*function[ 	]*(\\|[ 	]*=[ 	]*{\\)\\)") (typescript--quick-match-re . "^[ 	]*\\(?:#define[ 	]+[a-zA-Z_]\\|Ext\\.extend\\|Object\\.extend\\|\\(?:var[ 	]+\\)?[a-zA-Z_$0-9.]+[ 	]*=[ 	]*\\(?:Class\\.create\\|Ext\\.extend\\|[a-zA-Z_$0-9]+\\.extend\\(?:Final\\)?\\)[ 	]*(\\|dojo\\.declare[ 	]*(\\|MochiKit\\.Base\\.update[ 	]*(\\|[a-zA-Z_$0-9.]+\\.prototype\\(?:\\.[a-zA-Z_$0-9]+[ 	]*=[ 	]*function[ 	]*(\\|[ 	]*=[ 	]*{\\)\\)") (font-lock-multiline . t) (font-lock-defaults (typescript--font-lock-keywords-4 typescript--font-lock-keywords-1 typescript--font-lock-keywords-2 typescript--font-lock-keywords-3 typescript--font-lock-keywords-4)) (indent-line-function . typescript-indent-line)) nil) 401 . 407) (nil fontified t 401 . 407) (401 . 407) 357 (t 25453 20991 537155 46000)) nil (25453 64971 123174 0) 0 nil])
([nil nil ((1027 . 1029) (t 25453 64971 129284 781000)) nil (25453 65060 530289 0) 0 nil])
([nil current ((#("j" 0 1 (fontified t face font-lock-function-name-face)) . -1027) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (1027 . 1028) (#("z" 0 1 (fontified t face font-lock-function-name-face)) . -1027) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -1028) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 1029) nil (25453 65060 530283 0) 0 nil])
nil
